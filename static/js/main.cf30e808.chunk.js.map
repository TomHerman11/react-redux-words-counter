{"version":3,"sources":["reportWebVitals.ts","redux/actionTypes.ts","redux/reducers.ts","redux/store.ts","business-logic/Textarea.tsx","redux/actions.ts","business-logic/Counters.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TEXT_CHANGED","initialState","chars","words","sentences","paragraphs","reducer","combineReducers","counters","state","action","type","payload","text","length","split","store","createStore","connect","textChangedActionDispatcher","useState","setText","className","value","onChange","event","target","placeholder","autoFocus","App","id","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBCTDQ,EAAe,eCEtBC,EAAe,CACnBC,MAAO,EACPC,MAAO,EACPC,UAAW,EACXC,WAAY,GCHRC,EAAUC,YAAgB,CAAEC,SDMP,WAAgF,IAA/EC,EAA8E,uDAAtER,EAAcS,EAAwD,uCACxG,OAAIA,EAAOC,OAASX,EACX,2BACFS,GADL,IAEEP,MAAOQ,EAAOE,QAAQC,KAAKC,OAC3BX,MAAOO,EAAOE,QAAQC,KAAKE,MAAM,QAAQD,OAAS,EAClDV,UAAWM,EAAOE,QAAQC,KAAKE,MAAM,sBAAsBD,OAAS,EACpET,WAAYK,EAAOE,QAAQC,KAAKE,MAAM,2BAA2BD,SAG5DL,KCdEO,EAAQC,YAAYX,G,cCsBlBY,kBAAQ,KAAM,CAAEC,4BCzBJ,SAACN,GAAD,MAAmB,CAC5CF,KAAMX,EACNY,QAAS,CACPC,WDsBWK,EArBf,YAAgH,IAA5FC,EAA2F,EAA3FA,4BAA2F,EACnFC,mBAAS,IAD0E,mBACpGP,EADoG,KAC9FQ,EAD8F,KAS3G,OACI,qBAAKC,UAAU,WAAf,SACI,0BACIC,MAAOV,EACPW,SAVQ,SAACC,GACjBJ,EAAQI,EAAMC,OAAOH,OAErBJ,EAA4BM,EAAMC,OAAOH,QAQjCI,YAAY,gBACZC,WAAS,S,MEEzB,IAIeV,eAJS,SAACT,GAAD,MAAiB,CACvCD,SAAUC,EAAMD,YAGHU,EAxBf,YAAsC,IAAlBV,EAAiB,EAAjBA,SAElB,OACE,sBAAKc,UAAU,WAAf,UACE,sBAAKA,UAAU,UAAf,yBACed,EAASN,SAExB,sBAAKoB,UAAU,UAAf,oBACUd,EAASL,SAEnB,sBAAKmB,UAAU,UAAf,wBACcd,EAASJ,aAEvB,sBAAKkB,UAAU,UAAf,yBACed,EAASH,oB,MCMfwB,MAlBf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,iDAEF,cAAC,EAAD,IACA,cAAC,EAAD,IACA,mBACEQ,GAAG,oBACHC,KAAK,yBACLL,OAAO,SACPM,IAAI,aAJN,uE,MCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUnB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAIJoB,SAASC,eAAe,SAM1B9C,M","file":"static/js/main.cf30e808.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const TEXT_CHANGED = \"TEXT_CHANGED\";\n","import { TEXT_CHANGED } from './actionTypes';\n\nconst initialState = {\n  chars: 0,\n  words: 0,\n  sentences: 0,\n  paragraphs: 0\n};\n\nexport const textReducer = (state = initialState, action: { type: string, payload: { text: string } }) => {\n  if (action.type === TEXT_CHANGED) {\n    return {\n      ...state,\n      chars: action.payload.text.length,\n      words: action.payload.text.split(/\\w+/g).length - 1,\n      sentences: action.payload.text.split(/\\w\\s?[.|!|?|;|\\n]/g).length - 1,\n      paragraphs: action.payload.text.split(/[\\r\\n|(\\r\\n)]+(?!\\s*$)/g).length\n    };\n  } else {\n    return state;\n  }\n};\n","import { createStore, combineReducers } from 'redux';\nimport { textReducer } from './reducers';\n\nconst reducer = combineReducers({ counters: textReducer });\n\nexport const store = createStore(reducer);","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { textChanged as textChangedActionDispatcher } from '../redux/actions';\n\nimport './Textarea.css';\n\nfunction Textarea({ textChangedActionDispatcher }: { textChangedActionDispatcher: (text: string) => unknown }) {\n    const [text, setText] = useState('');\n\n    const textChanged = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setText(event.target.value);\n        // dispatch a redux action with the new text as payload:\n        textChangedActionDispatcher(event.target.value);\n    }\n\n    return (\n        <div className=\"Textarea\">\n            <textarea\n                value={text}\n                onChange={textChanged}\n                placeholder='Happy typing!'\n                autoFocus />\n        </div>\n    );\n}\n\n// pass 'null' as we don't consume data from the redux state\nexport default connect(null, { textChangedActionDispatcher })(Textarea);\n","import { TEXT_CHANGED } from './actionTypes';\n\nexport const textChanged = (text: string) => ({\n  type: TEXT_CHANGED,\n  payload: {\n    text\n  }\n});\n","import { connect } from 'react-redux';\nimport './Counters.css'\n\nfunction Counters({ counters }: any) {\n\n  return (\n    <div className=\"Counters\">\n      <div className=\"Counter\">\n        Characters: {counters.chars}\n      </div>\n      <div className=\"Counter\">\n        Words: {counters.words}\n      </div>\n      <div className=\"Counter\">\n        Sentences: {counters.sentences}\n      </div>\n      <div className=\"Counter\">\n        Paragraphs: {counters.paragraphs}\n      </div>\n    </div>\n  );\n}\n\nconst MapStateToProps = (state: any) => ({\n  counters: state.counters\n});\n\nexport default connect(MapStateToProps)(Counters);\n","import Textarea from './business-logic/Textarea';\nimport Counters from './business-logic/Counters';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h2>Words Counter</h2>\n      </div>\n      <Textarea />\n      <Counters />\n      <a\n        id=\"background-credit\"\n        href=\"http://www.freepik.com\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >Background image is designed by macrovector / Freepik</a>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}